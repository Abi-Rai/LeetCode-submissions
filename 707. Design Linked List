public class MyLinkedList {

    private class ListNode{
        public int val {get;set;}
        public ListNode next{get;set;}
        public ListNode(int x){
            val = x;
        }
    }
    private ListNode _head= null;
    private ListNode _tail= null;
  	private int _length =0;
    
    public MyLinkedList() {
        
    }
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    public int Get(int index) {
        if(index < 0 || index >= _length){
            Console.WriteLine("ind:{0} len:{1}",index,_length);
            return -1;
        }
        ListNode curr = GetCurrentNode(index);
        return curr.val;
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    public void AddAtHead(int val) {
        ListNode tempHead = new ListNode(val);
        tempHead.next = _head;
        _head = tempHead;
        if(_tail == null){
            if(_length != 0){
                throw new Exception($"Tail is null but length: {_length}");
            }
            _tail = tempHead;
        }
        _length++;
    }
    
    /** Append a node of value val to the last element of the linked list. */
    public void AddAtTail(int val) {
        if(_tail == null){
            AddAtHead(val);
            return;
        }
        _tail.next = new ListNode(val);
        _tail = _tail.next;
        _length++;
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    public void AddAtIndex(int index, int val) {
        if(index<0 || index >_length){
            return;
        }
        if(index == _length){
            AddAtTail(val);
            return;
        }
        if(index == 0){
            AddAtHead(val);
            return;
        }
        index--;
        ListNode curr = GetCurrentNode(index);
        ListNode nextNode = curr.next;
        curr.next = new ListNode(val);
        curr.next.next = nextNode;
        _length++;
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    public void DeleteAtIndex(int index) {
        if(index <0 || index >= _length){
            return;
        }
        if(index == 0){
            _head = _head.next;
            if(_length == 1){
                _tail = null;
            }
        }else{
            index--;
            int i =0;
            ListNode curr = GetCurrentNode(index);
            ListNode nodeToRemove = curr.next;
            curr.next = nodeToRemove.next;
            if(nodeToRemove == _tail){
                _tail= curr;
            }
        }
        _length--;
    }
    
    
    /** -- Helper function -- Iterate to the indexed node  **/
    private ListNode GetCurrentNode(int index){ 
        int i =0;
        ListNode curr = _head;
        while (i != index){
            curr = curr.next;
            i++;
        }
        return curr;
    }
}

/**
 * MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.Get(index);
 * obj.AddAtHead(val);
 * obj.AddAtTail(val);
 * obj.AddAtIndex(index,val);
 * obj.DeleteAtIndex(index);
 */
