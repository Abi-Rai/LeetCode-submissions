public class Solution {
     Dictionary<char,List<char>> dict = new Dictionary<char,List<char>>(){
        {'2',new List<char>(){'a','b','c'}},
        {'3', new List<char>(){'d','e','f'}},
        {'4', new List<char>(){'g','h','i'}},
        {'5', new List<char>(){'j','k','l'}},
        {'6', new List<char>(){'m','n','o'}},
        {'7', new List<char>(){'p','q','r','s'}},
        {'8', new List<char>(){'t','u','v'}},
        {'9', new List<char>(){'w','x','y','z'}}
        };
    IList<string> ans = new List<string>();
    void RecursiveCombine(string digits, string current, int indx, Dictionary<char,List<char>> dict){
        if  (indx == digits.Length){
            if(current.Length>0){
                ans.Add(current);
            }
            return;
        }
        for (int i = 0; i < dict[digits[indx]].Count; i++)
        {
            RecursiveCombine(digits, current + dict[digits[indx]][i], indx + 1, dict);
        }
    }
    public IList<string> LetterCombinations(string digits) {
        RecursiveCombine(digits,"",0,dict);
        return ans;
    }
}
