// Recursion
public class Solution {
    public int Fib(int N) {
        if(N <= 1){
            return N;
        }
        int ans = Fib(N-1) + Fib(N-2);
        return ans;
    }
}

// Bottom-up
public class Solution {
public int CountFib(int N, int[] memo){
    if(N <= 0 ) return 0;
    if(N == 1) return 1;
    if(memo[N]>-1) return memo[N];
    memo[N] = (CountFib((N-1),memo) + CountFib((N-2),memo));
    return (memo[N]);
}
    
    public int Fib(int N) {
    int[] memo = new int[N+1];
        for(int i = 0; i < N+1; i++){
        memo[i] = -1;
        }
        return CountFib(N,memo);
    }
}

//Golden Ratio 
// i.e  --- GR= (1+√5)/2 ; 
// Nth term = (GR^N) / √5 

public class Solution {
    public int Fib(int N) {
        double GOLDENRATIO = (1 + Math.Sqrt(5))/2;
        return (int)Math.Round(Math.Pow(GOLDENRATIO, N)/ Math.Sqrt(5));
    }
}
